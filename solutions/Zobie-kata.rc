use std::collections::{HashSet, HashMap};
use std::time::{SystemTime, UNIX_EPOCH};
use std::fs::OpenOptions;
use std::io::Write;

#[derive(Debug, PartialEq, Eq, Hash, Clone, Copy, PartialOrd, Ord)]
enum Level {
    Blue,
    Yellow,
    Orange,
    Red,
}

impl Level {
    fn from_experience(exp: u32) -> Self {
        match exp {
            0..=6 => Level::Blue,
            7..=18 => Level::Yellow,
            19..=42 => Level::Orange,
            _ => Level::Red,
        }
    }
}

#[derive(Debug)]
struct Survivor {
    name: String,
    wounds: u8,
    actions: u8,
    experience: u32,
    equipment: Vec<String>,
}

impl Survivor {
    fn new(name: &str) -> Self {
        Survivor {
            name: name.to_string(),
            wounds: 0,
            actions: 3,
            experience: 0,
            equipment: Vec::new(),
        }
    }

    fn receive_wound(&mut self) {
        if self.wounds < 2 {
            self.wounds += 1;
        }

        if self.wounds >= 2 {
            self.equipment.clear();
        } else {
            let max_capacity = 5 - self.wounds as usize;
            while self.equipment.len() > max_capacity {
                self.equipment.pop();
            }
        }
    }

    fn add_experience(&mut self) {
        self.experience += 1;
    }

    fn level(&self) -> Level {
        Level::from_experience(self.experience)
    }

    fn add_equipment(&mut self, item: &str) {
        if self.equipment.len() < (5 - self.wounds as usize) {
            self.equipment.push(item.to_string());
        }
    }

    fn is_dead(&self) -> bool {
        self.wounds >= 2
    }
}

#[derive(Debug)]
struct Game {
    survivors: HashMap<String, Survivor>,
    history: Vec<String>,
    start_time: u64,
    current_level: Level,
}

impl Game {
    fn new() -> Self {
        let start_time = SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_secs();
        
        let mut game = Game {
            survivors: HashMap::new(),
            history: vec![],
            start_time,
            current_level: Level::Blue,
        };
        game.record_event(&format!("Game started at UNIX time: {}", start_time));
        game
    }

    fn log_to_file(message: &str) {
        let mut file = OpenOptions::new()
            .create(true)
            .append(true)
            .open("game_history.log")
            .unwrap();
        writeln!(file, "{}", message).unwrap();
    }

    fn record_event(&mut self, message: &str) {
        self.history.push(message.to_string());
        Game::log_to_file(message);
    }

    fn add_survivor(&mut self, survivor: Survivor) -> bool {
        if self.survivors.contains_key(&survivor.name) {
            return false;
        }
        self.record_event(&format!("Survivor '{}' added to the game.", survivor.name));
        self.survivors.insert(survivor.name.clone(), survivor);
        true
    }

    fn survivor_add_equipment(&mut self, name: &str, item: &str) {
        if let Some(s) = self.survivors.get_mut(name) {
            s.add_equipment(item);
            self.record_event(&format!("Survivor '{}' acquired equipment: {}.", name, item));
        }
    }

    fn survivor_receive_wound(&mut self, name: &str) {
        if let Some(s) = self.survivors.get_mut(name) {
            let was_alive = !s.is_dead();
            s.receive_wound();
            self.record_event(&format!("Survivor '{}' received a wound ({} total).", name, s.wounds));
            if was_alive && s.is_dead() {
                self.record_event(&format!("Survivor '{}' has died.", name));
                if self.is_game_over() {
                    self.record_event("Game has ended. All survivors have died.");
                }
            }
        }
    }

    fn survivor_kill_zombie(&mut self, name: &str) {
        if let Some(s) = self.survivors.get_mut(name) {
            let old_level = s.level();
            s.add_experience();
            let new_level = s.level();
            if new_level != old_level {
                self.record_event(&format!("Survivor '{}' leveled up to {:?}.", name, new_level));
            }
            self.update_game_level();
        }
    }

    fn update_game_level(&mut self) {
        let new_level = self
            .survivors
            .values()
            .filter(|s| !s.is_dead())
            .map(|s| s.level())
            .max()
            .unwrap_or(Level::Blue);

        if new_level != self.current_level {
            self.current_level = new_level;
            self.record_event(&format!("Game level has changed to {:?}.", new_level));
        }
    }

    fn is_game_over(&self) -> bool {
        self.survivors.values().all(|s| s.is_dead())
    }

    fn game_level(&self) -> Level {
        self.current_level
    }

    fn print_history(&self) {
        println!("Game History:");
        for event in &self.history {
            println!("- {}", event);
        }
    }
}

fn main() {
    let mut game = Game::new();
    let alice = Survivor::new("Alice");
    let bob = Survivor::new("Bob");

    game.add_survivor(alice);
    game.add_survivor(bob);

    game.survivor_add_equipment("Alice", "Baseball bat");
    game.survivor_add_equipment("Bob", "Katana");

    game.survivor_receive_wound("Alice");
    game.survivor_kill_zombie("Alice");
    game.survivor_kill_zombie("Alice");

    game.survivor_receive_wound("Alice");
    game.survivor_receive_wound("Bob");
    game.survivor_receive_wound("Bob");

    println!("Game Level: {:?}", game.game_level());
    println!("Game Over: {}", game.is_game_over());

    game.print_history();
}
