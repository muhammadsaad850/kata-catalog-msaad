struct Character {
    health: i32,
    level: u32,
    is_alive: bool,
    attack_range: f32,  // New field for attack range
}

impl Character {
    // Constructor with attack range
    fn new(attack_range: f32) -> Character {
        Character {
            health: 1000,
            level: 1,
            is_alive: true,
            attack_range,
        }
    }

    // Method to deal damage, now includes range check
    fn deal_damage(&mut self, target: &mut Character, damage: i32, distance: f32) {
        if self as *const _ == target as *const _ {
            println!("Character cannot deal damage to itself.");
            return;
        }

        if !target.is_alive {
            println!("Cannot deal damage to a dead character.");
            return;
        }

        // Check if the target is within range
        if distance > self.attack_range {
            println!("Target is out of range.");
            return;
        }

        let actual_damage = self.adjust_damage(target, damage);
        target.receive_damage(actual_damage);
    }

    // Method to receive damage
    fn receive_damage(&mut self, damage: i32) {
        if damage >= self.health {
            self.health = 0;
            self.is_alive = false;
            println!("The character has died.");
        } else {
            self.health -= damage;
            println!("The character received {} damage, health is now {}", damage, self.health);
        }
    }

    // Heal method - simplified to only heal self
    fn heal_self(&mut self, amount: i32) {
        if !self.is_alive {
            println!("Cannot heal a dead character.");
            return;
        }

        self.health = (self.health + amount).min(1000);
        println!("Character healed, health is now {}", self.health);
    }

    // Adjust damage based on level difference
    fn adjust_damage(&self, target: &Character, damage: i32) -> i32 {
        if target.level >= self.level + 5 {
            (damage as f32 * 0.5).round() as i32
        } else if target.level + 5 <= self.level {
            (damage as f32 * 1.5).round() as i32
        } else {
            damage
        }
    }
}

fn main() {
    let mut melee_character = Character::new(2.0);  // Melee fighter with range 2 meters
    let mut ranged_character = Character::new(20.0);  // Ranged fighter with range 20 meters

    // Change level for testing
    ranged_character.level = 6;

    // Dealing damage within range
    println!("Melee character tries to deal 200 damage to ranged character within 1 meter.");
    melee_character.deal_damage(&mut ranged_character, 200, 1.0);  // In range

    // Dealing damage out of range
    println!("Melee character tries to deal 200 damage to ranged character from 5 meters.");
    melee_character.deal_damage(&mut ranged_character, 200, 5.0);  // Out of range

    // Ranged character attacks within range
    println!("Ranged character tries to deal 300 damage to melee character within 15 meters.");
    ranged_character.deal_damage(&mut melee_character, 300, 15.0);  // In range

    // Healing self
    println!("Ranged character heals itself.");
    ranged_character.heal_self(50);
}
